<template>
  <v-card class="mx-auto my-4">
    <v-card-title>
      {{ service.title }}
      <v-spacer></v-spacer>
      <v-icon @click="editService">mdi-pencil</v-icon>
      <v-icon @click="deleteService">mdi-delete</v-icon>
    </v-card-title>
    <v-card-subtitle>{{ service.description }}</v-card-subtitle>
    <v-card-text>
      <strong>Price:</strong> ${{ service.price }} <br />
      <strong>Available Slots:</strong>
      <v-btn @click="showCalendar = !showCalendar">Select Slot</v-btn>
      <v-menu
        v-model="showCalendar"
        close-on-content-click
        transition="scale-transition"
        offset-y
      >
        <template v-slot:activator="{ on, attrs }">
          <v-btn color="primary" dark v-bind="attrs" v-on="on"
            >Choose Slot</v-btn
          >
        </template>
        <v-calendar
          v-model="selectedDate"
          color="primary"
          @click:date="openSlots"
        ></v-calendar>
      </v-menu>
      <v-dialog v-model="showSlots" max-width="600px">
        <v-card>
          <v-card-title>Select a Slot</v-card-title>
          <v-card-text>
            <v-list>
              <v-list-item
                v-for="slot in availableSlots"
                :key="slot"
                @click="selectSlot(slot)"
              >
                <v-list-item-content>{{ slot }}</v-list-item-content>
              </v-list-item>
            </v-list>
          </v-card-text>
          <v-card-actions>
            <v-spacer></v-spacer>
            <v-btn color="primary" text @click="showSlots = false">Close</v-btn>
          </v-card-actions>
        </v-card>
      </v-dialog>
    </v-card-text>
  </v-card>
</template>

<script setup>
import { ref } from 'vue';
const props = defineProps({
  service: {
    type: Object,
    default: () => ({})
  }
});

const emit = defineEmits(['edit', 'delete']);
const showCalendar = ref(false);
const selectedDate = ref('');
const showSlots = ref(false);
const availableSlots = ref([]);

const officeHours = {
  start: '09:00',
  end: '18:00',
  sessionDuration: 40, // in minutes
  sessionGap: 20 // in minutes
};

const editService = () => {
  emit('edit', service);
};

const deleteService = () => {
  emit('delete', service);
};

const openSlots = () => {
  const slots = generateSlotsForDay(officeHours);
  availableSlots.value = slots;
  showSlots.value = true;
};

const selectSlot = (slot) => {
  // Handle slot selection
  console.log('Selected slot:', slot);
  showSlots.value = false;
};

const generateSlotsForDay = (hours) => {
  const slots = [];
  let currentTime = parseTime(hours.start);

  while (currentTime < parseTime(hours.end)) {
    const endTime = addMinutes(currentTime, hours.sessionDuration);
    if (endTime > parseTime(hours.end)) break;
    slots.push(formatTime(currentTime) + ' - ' + formatTime(endTime));
    currentTime = addMinutes(
      currentTime,
      hours.sessionDuration + hours.sessionGap
    );
  }

  return slots;
};

const parseTime = (time) => {
  const [hour, minute] = time.split(':').map(Number);
  return new Date(1970, 0, 1, hour, minute, 0);
};

const addMinutes = (time, mins) => {
  return new Date(time.getTime() + mins * 60000);
};

const formatTime = (date) => {
  return date.toTimeString().substr(0, 5);
};
</script>

<style scoped>
/* Add any necessary styling here */
</style>
